<?php
                
namespace App\Lang;
                
use Mbcraft\Laravel\GeneratorUtils;

/**
This class is generated by artisan lang:regenerate_helpers.
Manually editing is strongly discouraged.
*/
                
class LValidation {
                                
    public static function __callStatic($name,$args) {
        $key = GeneratorUtils::getKeyFromMethodName($name,$args);
        
        return "No value found for key : ".$key." .";
    }
   
    public function __call($name,$args) {
    
        $to_eval = "";
        foreach ($args as $k => $arg) {
            $param = $k;
            $$param = $arg;
            $to_eval.= $k.",";
        }
        $to_eval = substr($to_eval,0,strlen($to_eval)-2);
        return eval('return self::'.$name.'('.$to_eval.');');
    }
                
    private static function __values($key,$args) {
        if (count($args)==0) {
            return trans($key);
        } else {
            return trans($key.'.'.$args[0]);
        }
    }
                                
    public static function accepted() {
        return trans('validation.accepted');
    } 
                                                
    public static function activeUrl() {
        return trans('validation.active_url');
    } 
                                                
    public static function after() {
        return trans('validation.after');
    } 
                                                
    public static function alpha() {
        return trans('validation.alpha');
    } 
                                                
    public static function alphaDash() {
        return trans('validation.alpha_dash');
    } 
                                                
    public static function alphaNum() {
        return trans('validation.alpha_num');
    } 
                                                
    public static function array_() {
        return trans('validation.array');
    } 
                                                
    public static function before() {
        return trans('validation.before');
    } 
                                                
    public static function between_numeric() {
        return trans('validation.between.numeric');
    } 
                                                
    public static function between_file() {
        return trans('validation.between.file');
    } 
                                                
    public static function between_string() {
        return trans('validation.between.string');
    } 
                                                
    public static function between_array() {
        return trans('validation.between.array');
    } 
                                                
    public static function boolean() {
        return trans('validation.boolean');
    } 
                                                
    public static function confirmed() {
        return trans('validation.confirmed');
    } 
                                                
    public static function date() {
        return trans('validation.date');
    } 
                                                
    public static function dateFormat() {
        return trans('validation.date_format');
    } 
                                                
    public static function different() {
        return trans('validation.different');
    } 
                                                
    public static function digits() {
        return trans('validation.digits');
    } 
                                                
    public static function digitsBetween() {
        return trans('validation.digits_between');
    } 
                                                
    public static function email() {
        return trans('validation.email');
    } 
                                                
    public static function filled() {
        return trans('validation.filled');
    } 
                                                
    public static function exists() {
        return trans('validation.exists');
    } 
                                                
    public static function image() {
        return trans('validation.image');
    } 
                                                
    public static function in() {
        return trans('validation.in');
    } 
                                                
    public static function integer() {
        return trans('validation.integer');
    } 
                                                
    public static function ip() {
        return trans('validation.ip');
    } 
                                                
    public static function max_numeric() {
        return trans('validation.max.numeric');
    } 
                                                
    public static function max_file() {
        return trans('validation.max.file');
    } 
                                                
    public static function max_string() {
        return trans('validation.max.string');
    } 
                                                
    public static function max_array() {
        return trans('validation.max.array');
    } 
                                                
    public static function mimes() {
        return trans('validation.mimes');
    } 
                                                
    public static function min_numeric() {
        return trans('validation.min.numeric');
    } 
                                                
    public static function min_file() {
        return trans('validation.min.file');
    } 
                                                
    public static function min_string() {
        return trans('validation.min.string');
    } 
                                                
    public static function min_array() {
        return trans('validation.min.array');
    } 
                                                
    public static function notIn() {
        return trans('validation.not_in');
    } 
                                                
    public static function numeric() {
        return trans('validation.numeric');
    } 
                                                
    public static function regex() {
        return trans('validation.regex');
    } 
                                                
    public static function required() {
        return trans('validation.required');
    } 
                                                
    public static function requiredIf() {
        return trans('validation.required_if');
    } 
                                                
    public static function requiredWith() {
        return trans('validation.required_with');
    } 
                                                
    public static function requiredWithAll() {
        return trans('validation.required_with_all');
    } 
                                                
    public static function requiredWithout() {
        return trans('validation.required_without');
    } 
                                                
    public static function requiredWithoutAll() {
        return trans('validation.required_without_all');
    } 
                                                
    public static function same() {
        return trans('validation.same');
    } 
                                                
    public static function size_numeric() {
        return trans('validation.size.numeric');
    } 
                                                
    public static function size_file() {
        return trans('validation.size.file');
    } 
                                                
    public static function size_string() {
        return trans('validation.size.string');
    } 
                                                
    public static function size_array() {
        return trans('validation.size.array');
    } 
                                                
    public static function string() {
        return trans('validation.string');
    } 
                                                
    public static function timezone() {
        return trans('validation.timezone');
    } 
                                                
    public static function unique() {
        return trans('validation.unique');
    } 
                                                
    public static function url() {
        return trans('validation.url');
    } 
                                                
    public static function custom_attributeName_ruleName() {
        return trans('validation.custom.attribute-name.rule-name');
    } 
                                
}
