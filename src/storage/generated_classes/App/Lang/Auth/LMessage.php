<?php
                
namespace App\Lang\Auth;
                
use Mbcraft\Laravel\GeneratorUtils;

/**
This class is generated by artisan lang:regenerate_helpers.
Manually editing is strongly discouraged.
*/
                
class LMessage {
                                
    public static function __callStatic($name,$args) {
        $key = GeneratorUtils::getKeyFromMethodName($name,$args);
        
        return "No value found for key : ".$key." .";
    }
   
    public function __call($name,$args) {
    
        $to_eval = "";
        foreach ($args as $k => $arg) {
            $param = $k;
            $$param = $arg;
            $to_eval.= $k.",";
        }
        $to_eval = substr($to_eval,0,strlen($to_eval)-2);
        return eval('return self::'.$name.'('.$to_eval.');');
    }
                
    private static function __values($key,$args) {
        if (count($args)==0) {
            return trans($key);
        } else {
            return trans($key.'.'.$args[0]);
        }
    }
                                
    public static function accountAlreadyExists() {
        return trans('auth/message.account_already_exists');
    } 
                                                
    public static function accountNotFound() {
        return trans('auth/message.account_not_found');
    } 
                                                
    public static function accountNotActivated() {
        return trans('auth/message.account_not_activated');
    } 
                                                
    public static function accountSuspended() {
        return trans('auth/message.account_suspended');
    } 
                                                
    public static function accountBanned() {
        return trans('auth/message.account_banned');
    } 
                                                
    public static function login_error() {
        return trans('auth/message.login.error');
    } 
                                                
    public static function login_success() {
        return trans('auth/message.login.success');
    } 
                                                
    public static function signup_error() {
        return trans('auth/message.signup.error');
    } 
                                                
    public static function signup_success() {
        return trans('auth/message.signup.success');
    } 
                                                
    public static function forgotPassword_error() {
        return trans('auth/message.forgot-password.error');
    } 
                                                
    public static function forgotPassword_success() {
        return trans('auth/message.forgot-password.success');
    } 
                                                
    public static function forgotPasswordConfirm_error() {
        return trans('auth/message.forgot-password-confirm.error');
    } 
                                                
    public static function forgotPasswordConfirm_success() {
        return trans('auth/message.forgot-password-confirm.success');
    } 
                                                
    public static function activate_error() {
        return trans('auth/message.activate.error');
    } 
                                                
    public static function activate_success() {
        return trans('auth/message.activate.success');
    } 
                                                
    public static function authorizationFailed() {
        return trans('auth/message.authorization_failed');
    } 
                                                
    public static function throttlingException() {
        return trans('auth/message.throttling_exception');
    } 
                                                
    public static function exists() {
        return trans('message.exists');
    } 
                                                
    public static function notFound() {
        return trans('message._not_found');
    } 
                                                
    public static function nameRequired() {
        return trans('message._name_required');
    } 
                                                
    public static function success_create() {
        return trans('message.success.create');
    } 
                                                
    public static function success_update() {
        return trans('message.success.update');
    } 
                                                
    public static function success_delete() {
        return trans('message.success.delete');
    } 
                                                
    public static function delete_create() {
        return trans('message.delete.create');
    } 
                                                
    public static function delete_update() {
        return trans('message.delete.update');
    } 
                                                
    public static function delete_delete() {
        return trans('message.delete.delete');
    } 
                                                
    public static function error_itemExists() {
        return trans('message.error.item_exists');
    } 
                                                
    public static function success_created() {
        return trans('message.success.created');
    } 
                                                
    public static function success_updated() {
        return trans('message.success.updated');
    } 
                                                
    public static function success_deleted() {
        return trans('message.success.deleted');
    } 
                                                
    public static function error_created() {
        return trans('message.error.created');
    } 
                                                
    public static function error_updated() {
        return trans('message.error.updated');
    } 
                                                
    public static function error_deleted() {
        return trans('message.error.deleted');
    } 
                                                
    public static function error_alreadyExists() {
        return trans('message.error.already_exists');
    } 
                                                
    public static function error_notFound() {
        return trans('message.error.not_found');
    } 
                                                
    public static function error_nameRequired() {
        return trans('message.error.name_required');
    } 
                                
}
